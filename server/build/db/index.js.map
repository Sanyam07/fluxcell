{"version":3,"sources":["../../src/db/index.js"],"names":["DB","process","env","NODE_ENV","DATABASE_URL_PROD","DATABASE_URL_DEV","db","Database","url","useDatabase","useBasicAuth","DATABASE_PASSWORD_ROOT","err","name","collection","create","truncate","edgeCollection","data","console","log","save","created","Date","query","cursor","all"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;;;;;;;;;;;;;IAEMA,E;;;AACJ,gBAAc;AAAA;;AACZ,QAAI;AACF,uBAAI,uBAAJ;AACA,uBAAI,KAAJ,EAAWC,OAAO,CAACC,GAAR,CAAYC,QAAvB;AACA,uBAAI,kBAAJ,EAAwBF,OAAO,CAACC,GAAR,CAAYE,iBAApC;AACA,uBAAI,iBAAJ,EAAuBH,OAAO,CAACC,GAAR,CAAYG,gBAAnC;AACA,WAAKC,EAAL,GAAU,IAAIC,kBAAJ,CAAa;AACrBC,QAAAA,GAAG,EAAEP,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwCF,OAAO,CAACC,GAAR,CAAYE,iBAApD,GAAwEH,OAAO,CAACC,GAAR,CAAYG;AADpE,OAAb,CAAV;AAGA,WAAKC,EAAL,CAAQG,WAAR,CAAoB,WAApB;AACA,WAAKH,EAAL,CAAQI,YAAR,CAAqB,MAArB,EAA6BT,OAAO,CAACC,GAAR,CAAYS,sBAAzC,EATE,CAUF;AACD,KAXD,CAWE,OAAOC,GAAP,EAAY;AACZ,uBAAI,uBAAJ,EAA6BA,GAA7B;AACD;AACF;;;;kCAEa;AACZ,aAAO,KAAKN,EAAZ;AACD;;;qCAEgBO,I,EAAM;AACrB,aAAO,KAAKP,EAAL,CAAQQ,UAAR,CAAmBD,IAAnB,EAAyBE,MAAzB,EAAP;AACD;;;uCAEkBF,I,EAAM;AACvB,aAAO,KAAKP,EAAL,CAAQQ,UAAR,CAAmBD,IAAnB,EAAyBG,QAAzB,EAAP;AACD;;;2CAEsBH,I,EAAM;AAC3B,aAAO,KAAKP,EAAL,CAAQW,cAAR,CAAuBJ,IAAvB,EAA6BG,QAA7B,EAAP;AACD;;;yCAEoBH,I,EAAM;AACzB,aAAO,KAAKP,EAAL,CAAQW,cAAR,CAAuBJ,IAAvB,EAA6BE,MAA7B,EAAP;AACD;;;yCAEoBF,I,EAAMK,I,EAAM;AAC/BC,MAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAAoCP,IAApC,EAA0CK,IAA1C;AACA,UAAMJ,UAAU,GAAG,KAAKR,EAAL,CAAQQ,UAAR,CAAmBD,IAAnB,CAAnB;AACA,aAAOC,UAAU,CAACO,IAAX,CAAgB;AAAEH,QAAAA,IAAI,EAAJA,IAAF;AAAQI,QAAAA,OAAO,EAAE,IAAIC,IAAJ;AAAjB,OAAhB,CAAP;AACD;;;;;;+CAEWC,M;;;;;;;uBACW,KAAKlB,EAAL,CAAQkB,KAAR,CAAcA,MAAd,C;;;AAAfC,gBAAAA,M;iDACCA,MAAM,CAACC,GAAP,E;;;;;;;;;;;;;;;;oCAGOb,I,EAAMK,I,EAAM;AAC1B,UAAMJ,UAAU,GAAG,KAAKR,EAAL,CAAQW,cAAR,CAAuBJ,IAAvB,CAAnB;AACA,aAAOC,UAAU,CAACO,IAAX,mBAAqBH,IAArB;AAA2BI,QAAAA,OAAO,EAAE,IAAIC,IAAJ;AAApC,SAAP;AACD;;;;;;AAEH,IAAMjB,EAAE,GAAG,IAAIN,EAAJ,EAAX;eAEeM,E","sourcesContent":["import 'dotenv/config';\nimport { Database, aql } from 'arangojs';\nimport { log } from '../utils/logger';\n\nclass DB {\n  constructor() {\n    try {\n      log('initializing database');\n      log('env', process.env.NODE_ENV);\n      log('databaseurl_prod', process.env.DATABASE_URL_PROD);\n      log('databaseurl_dev', process.env.DATABASE_URL_DEV);\n      this.db = new Database({\n        url: process.env.NODE_ENV === 'production' ? process.env.DATABASE_URL_PROD : process.env.DATABASE_URL_DEV,\n      });\n      this.db.useDatabase('fluxgraph');\n      this.db.useBasicAuth('root', process.env.DATABASE_PASSWORD_ROOT);\n      // this.db.useBasicAuth(\"root\", process.env.DATABASE_PASSWORD_ROOT);\n    } catch (err) {\n      log('database login failed', err);\n    }\n  }\n\n  getInstance() {\n    return this.db;\n  }\n\n  createCollection(name) {\n    return this.db.collection(name).create();\n  }\n\n  truncateCollection(name) {\n    return this.db.collection(name).truncate();\n  }\n\n  truncateEdgeCollection(name) {\n    return this.db.edgeCollection(name).truncate();\n  }\n\n  createEdgeCollection(name) {\n    return this.db.edgeCollection(name).create();\n  }\n\n  insertIntoCollection(name, data) {\n    console.log('insertintocollection', name, data);\n    const collection = this.db.collection(name);\n    return collection.save({ data, created: new Date() });\n  }\n\n  async query(query) {\n    const cursor = await this.db.query(query);\n    return cursor.all();\n  }\n\n  insertIntoEdges(name, data) {\n    const collection = this.db.edgeCollection(name);\n    return collection.save({ ...data, created: new Date() });\n  }\n}\nconst db = new DB();\n\nexport default db;\n"],"file":"index.js"}