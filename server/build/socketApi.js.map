{"version":3,"sources":["../src/socketApi.js"],"names":["io","require","uuid","module","exports","socketApi","httpServer","on","socket","msg","console","log","sockets","emit","Date","toString","channel","posts","id","listen"],"mappings":";;AAAA;;AACA;;AACA;;AACA;;;;;;;;AAEA,IAAMA,EAAE,GAAGC,OAAO,CAAC,WAAD,CAAP,EAAX;;AACA,IAAMC,IAAI,GAAGD,OAAO,CAAC,SAAD,CAApB;;AAEAE,MAAM,CAACC,OAAP,GAAiB,SAASC,SAAT,OAAmC;AAAA,MAAdC,UAAc,QAAdA,UAAc;AAClDN,EAAAA,EAAE,CAACO,EAAH,CAAM,YAAN,EAAoB,UAACC,MAAD,EAAY;AAC9BA,IAAAA,MAAM,CAACD,EAAP,CAAU,kBAAV,EAA8B,UAACE,GAAD,EAAS;AACrCC,MAAAA,OAAO,CAACC,GAAR,CAAY,4CAAZ,EADqC,CAGrC;AACA;AAEA;AACA;AAEA;;AACAX,MAAAA,EAAE,CAACY,OAAH,CAAWC,IAAX,CAAgB,cAAhB,kBAAyCJ,GAAzC,sBAAwD,IAAIK,IAAJ,GAAWC,QAAX,EAAxD;AACD,KAXD;AAaAP,IAAAA,MAAM,CAACD,EAAP,CAAU,cAAV;AAAA;AAAA;AAAA;AAAA;AAAA,8BAA0B,iBAAOE,GAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACxB,iCAAI,4BAAJ;AADwB;AAAA;AAAA,uBAGhB,wCAAqBA,GAArB,CAHgB;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAKtB;AACAC,gBAAAA,OAAO,CAACC,GAAR;;AANsB;AASxB;AACA,iCAAI,wBAAJ,EAA8BF,GAA9B;AAVwB;AAAA,uBAWJ,gCAAkBA,GAAG,CAACO,OAAtB,CAXI;;AAAA;AAWlBC,gBAAAA,KAXkB;AAYxB;AACAjB,gBAAAA,EAAE,CAACY,OAAH,CAAWC,IAAX,CAAgB,YAAhB,EAA8B;AAAEK,kBAAAA,EAAE,EAAEhB,IAAI,EAAV;AAAce,kBAAAA,KAAK,EAALA;AAAd,iBAA9B,EAbwB,CAcxB;;AAdwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA1B;;AAAA;AAAA;AAAA;AAAA;AAgBD,GA9BD;AAgCAjB,EAAAA,EAAE,CAACmB,MAAH,CAAUb,UAAV;AACD,CAlCD","sourcesContent":["import DB from './db';\nimport { getNodesByChannel, getEdgesByChannel, getPostsByChannel } from './db/queries';\nimport { saveMessageToChannel } from './db/manipulation';\nimport { log } from './utils/logger';\n\nconst io = require('socket.io')();\nconst uuid = require('uuid/v1');\n\nmodule.exports = function socketApi({ httpServer }) {\n  io.on('connection', (socket) => {\n    socket.on('chatTestListener', (msg) => {\n      console.log('socket is subscribing to chatTestListener ');\n\n      // emit only for who started it\n      // socket.emit(emitName, `Hello ${interval}, now is ${new Date().toString()}`);\n\n      // emit for all except who started it\n      // socket.broadcast.emit('users_count', clients);\n\n      // emit for all\n      io.sockets.emit('chatTestEmit', `Hello ${msg}, now is ${new Date().toString()}`);\n    });\n\n    socket.on('chatListener', async (msg) => {\n      log('saving messages to channel');\n      try {\n        await saveMessageToChannel(msg);\n      } catch (err) {\n        // log('error');\n        console.log(err);\n      }\n\n      // const msgsOfChannel = await getNodesByChannel(msg.channel);\n      log('getting postsbychannel', msg);\n      const posts = await getPostsByChannel(msg.channel);\n      // io.sockets.emit(\"chatServer\", { id: uuid(), userName: msg.userName, text: msg.text });\n      io.sockets.emit('chatServer', { id: uuid(), posts });\n      // io.sockets.emit(\"chatServer\", { id: uuid(), ...{ msgsOfChannel } });\n    });\n  });\n\n  io.listen(httpServer);\n};\n"],"file":"socketApi.js"}