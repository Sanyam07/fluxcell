{
  "{\"sourceRoot\":\"/home/antti/code/fluxcell/server/src\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"/home/antti/code/fluxcell/server\",\"filename\":\"/home/antti/code/fluxcell/server/src/index.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/home/antti/code/fluxcell/server\",\"plugins\":[],\"presets\":[]}:7.1.0": {
    "metadata": {},
    "options": {
      "sourceRoot": "/home/antti/code/fluxcell/server/src",
      "caller": {
        "name": "@babel/node"
      },
      "cwd": "/home/antti/code/fluxcell/server",
      "filename": "/home/antti/code/fluxcell/server/src/index.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/home/antti/code/fluxcell/server",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/home/antti/code/fluxcell/server/src/index.js",
        "plugins": []
      },
      "generatorOpts": {
        "filename": "/home/antti/code/fluxcell/server/src/index.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/home/antti/code/fluxcell/server/src",
        "sourceFileName": "index.js"
      }
    },
    "ast": null,
    "code": "require('@babel/polyfill');\n\nconst server = require('./server');\n\nconst express = require('express');\n\nconst restApi = require('./restApi');\n\nconst socketApi = require('./socketApi');\n\nconst cors = require('cors');\n\nconst app = express();\napp.use(cors());\nconst {\n  httpServer\n} = server.createServer(app);\nrestApi(app);\nsocketApi({\n  httpServer\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbInJlcXVpcmUiLCJzZXJ2ZXIiLCJleHByZXNzIiwicmVzdEFwaSIsInNvY2tldEFwaSIsImNvcnMiLCJhcHAiLCJ1c2UiLCJodHRwU2VydmVyIiwiY3JlYXRlU2VydmVyIl0sIm1hcHBpbmdzIjoiQUFBQUEsT0FBTyxDQUFDLGlCQUFELENBQVA7O0FBQ0EsTUFBTUMsTUFBTSxHQUFHRCxPQUFPLENBQUMsVUFBRCxDQUF0Qjs7QUFDQSxNQUFNRSxPQUFPLEdBQUdGLE9BQU8sQ0FBQyxTQUFELENBQXZCOztBQUNBLE1BQU1HLE9BQU8sR0FBR0gsT0FBTyxDQUFDLFdBQUQsQ0FBdkI7O0FBQ0EsTUFBTUksU0FBUyxHQUFHSixPQUFPLENBQUMsYUFBRCxDQUF6Qjs7QUFDQSxNQUFNSyxJQUFJLEdBQUdMLE9BQU8sQ0FBQyxNQUFELENBQXBCOztBQUVBLE1BQU1NLEdBQUcsR0FBR0osT0FBTyxFQUFuQjtBQUNBSSxHQUFHLENBQUNDLEdBQUosQ0FBUUYsSUFBSSxFQUFaO0FBQ0EsTUFBTTtBQUFFRyxFQUFBQTtBQUFGLElBQWlCUCxNQUFNLENBQUNRLFlBQVAsQ0FBb0JILEdBQXBCLENBQXZCO0FBRUFILE9BQU8sQ0FBQ0csR0FBRCxDQUFQO0FBQ0FGLFNBQVMsQ0FBQztBQUFFSSxFQUFBQTtBQUFGLENBQUQsQ0FBVCIsInNvdXJjZVJvb3QiOiIvaG9tZS9hbnR0aS9jb2RlL2ZsdXhjZWxsL3NlcnZlci9zcmMiLCJzb3VyY2VzQ29udGVudCI6WyJyZXF1aXJlKCdAYmFiZWwvcG9seWZpbGwnKTtcbmNvbnN0IHNlcnZlciA9IHJlcXVpcmUoJy4vc2VydmVyJyk7XG5jb25zdCBleHByZXNzID0gcmVxdWlyZSgnZXhwcmVzcycpO1xuY29uc3QgcmVzdEFwaSA9IHJlcXVpcmUoJy4vcmVzdEFwaScpO1xuY29uc3Qgc29ja2V0QXBpID0gcmVxdWlyZSgnLi9zb2NrZXRBcGknKTtcbmNvbnN0IGNvcnMgPSByZXF1aXJlKCdjb3JzJyk7XG5cbmNvbnN0IGFwcCA9IGV4cHJlc3MoKTtcbmFwcC51c2UoY29ycygpKTtcbmNvbnN0IHsgaHR0cFNlcnZlciB9ID0gc2VydmVyLmNyZWF0ZVNlcnZlcihhcHApO1xuXG5yZXN0QXBpKGFwcCk7XG5zb2NrZXRBcGkoeyBodHRwU2VydmVyIH0pO1xuIl19",
    "map": {
      "version": 3,
      "sources": [
        "index.js"
      ],
      "names": [
        "require",
        "server",
        "express",
        "restApi",
        "socketApi",
        "cors",
        "app",
        "use",
        "httpServer",
        "createServer"
      ],
      "mappings": "AAAAA,OAAO,CAAC,iBAAD,CAAP;;AACA,MAAMC,MAAM,GAAGD,OAAO,CAAC,UAAD,CAAtB;;AACA,MAAME,OAAO,GAAGF,OAAO,CAAC,SAAD,CAAvB;;AACA,MAAMG,OAAO,GAAGH,OAAO,CAAC,WAAD,CAAvB;;AACA,MAAMI,SAAS,GAAGJ,OAAO,CAAC,aAAD,CAAzB;;AACA,MAAMK,IAAI,GAAGL,OAAO,CAAC,MAAD,CAApB;;AAEA,MAAMM,GAAG,GAAGJ,OAAO,EAAnB;AACAI,GAAG,CAACC,GAAJ,CAAQF,IAAI,EAAZ;AACA,MAAM;AAAEG,EAAAA;AAAF,IAAiBP,MAAM,CAACQ,YAAP,CAAoBH,GAApB,CAAvB;AAEAH,OAAO,CAACG,GAAD,CAAP;AACAF,SAAS,CAAC;AAAEI,EAAAA;AAAF,CAAD,CAAT",
      "sourceRoot": "/home/antti/code/fluxcell/server/src",
      "sourcesContent": [
        "require('@babel/polyfill');\nconst server = require('./server');\nconst express = require('express');\nconst restApi = require('./restApi');\nconst socketApi = require('./socketApi');\nconst cors = require('cors');\n\nconst app = express();\napp.use(cors());\nconst { httpServer } = server.createServer(app);\n\nrestApi(app);\nsocketApi({ httpServer });\n"
      ]
    },
    "sourceType": "module",
    "mtime": 1553430765358
  },
  "{\"sourceRoot\":\"/home/antti/code/fluxcell/server/src\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"/home/antti/code/fluxcell/server\",\"filename\":\"/home/antti/code/fluxcell/server/src/server.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/home/antti/code/fluxcell/server\",\"plugins\":[],\"presets\":[]}:7.1.0": {
    "metadata": {},
    "options": {
      "sourceRoot": "/home/antti/code/fluxcell/server/src",
      "caller": {
        "name": "@babel/node"
      },
      "cwd": "/home/antti/code/fluxcell/server",
      "filename": "/home/antti/code/fluxcell/server/src/server.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/home/antti/code/fluxcell/server",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/home/antti/code/fluxcell/server/src/server.js",
        "plugins": []
      },
      "generatorOpts": {
        "filename": "/home/antti/code/fluxcell/server/src/server.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/home/antti/code/fluxcell/server/src",
        "sourceFileName": "server.js"
      }
    },
    "ast": null,
    "code": "const http = require('http');\n\nconst bodyParser = require('body-parser');\n\nconst path = require('path');\n\nconst chalk = require('chalk');\n\nconst express = require('express');\n\nmodule.exports.createServer = app => {\n  app.use(express.static(path.join(__dirname, './')));\n  app.use(bodyParser.urlencoded({\n    extended: true\n  }));\n  app.use(bodyParser.json());\n  const DEFAULT_PORT_HTTP = 4444;\n  const httpServer = http.createServer(app);\n  const portHttp = process.env.PORT_HTTP || DEFAULT_PORT_HTTP;\n  app.set('portHttp', portHttp);\n  httpServer.listen(app.get('portHttp'), () => console.log(chalk.green(`Dev api server listening on http://localhost:${portHttp}`)));\n  return {\n    httpServer\n  };\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNlcnZlci5qcyJdLCJuYW1lcyI6WyJodHRwIiwicmVxdWlyZSIsImJvZHlQYXJzZXIiLCJwYXRoIiwiY2hhbGsiLCJleHByZXNzIiwibW9kdWxlIiwiZXhwb3J0cyIsImNyZWF0ZVNlcnZlciIsImFwcCIsInVzZSIsInN0YXRpYyIsImpvaW4iLCJfX2Rpcm5hbWUiLCJ1cmxlbmNvZGVkIiwiZXh0ZW5kZWQiLCJqc29uIiwiREVGQVVMVF9QT1JUX0hUVFAiLCJodHRwU2VydmVyIiwicG9ydEh0dHAiLCJwcm9jZXNzIiwiZW52IiwiUE9SVF9IVFRQIiwic2V0IiwibGlzdGVuIiwiZ2V0IiwiY29uc29sZSIsImxvZyIsImdyZWVuIl0sIm1hcHBpbmdzIjoiQUFBQSxNQUFNQSxJQUFJLEdBQUdDLE9BQU8sQ0FBQyxNQUFELENBQXBCOztBQUNBLE1BQU1DLFVBQVUsR0FBR0QsT0FBTyxDQUFDLGFBQUQsQ0FBMUI7O0FBQ0EsTUFBTUUsSUFBSSxHQUFHRixPQUFPLENBQUMsTUFBRCxDQUFwQjs7QUFDQSxNQUFNRyxLQUFLLEdBQUdILE9BQU8sQ0FBQyxPQUFELENBQXJCOztBQUNBLE1BQU1JLE9BQU8sR0FBR0osT0FBTyxDQUFDLFNBQUQsQ0FBdkI7O0FBRUFLLE1BQU0sQ0FBQ0MsT0FBUCxDQUFlQyxZQUFmLEdBQStCQyxHQUFELElBQVM7QUFDckNBLEVBQUFBLEdBQUcsQ0FBQ0MsR0FBSixDQUFRTCxPQUFPLENBQUNNLE1BQVIsQ0FBZVIsSUFBSSxDQUFDUyxJQUFMLENBQVVDLFNBQVYsRUFBcUIsSUFBckIsQ0FBZixDQUFSO0FBQ0FKLEVBQUFBLEdBQUcsQ0FBQ0MsR0FBSixDQUNFUixVQUFVLENBQUNZLFVBQVgsQ0FBc0I7QUFDcEJDLElBQUFBLFFBQVEsRUFBRTtBQURVLEdBQXRCLENBREY7QUFLQU4sRUFBQUEsR0FBRyxDQUFDQyxHQUFKLENBQVFSLFVBQVUsQ0FBQ2MsSUFBWCxFQUFSO0FBRUEsUUFBTUMsaUJBQWlCLEdBQUcsSUFBMUI7QUFFQSxRQUFNQyxVQUFVLEdBQUdsQixJQUFJLENBQUNRLFlBQUwsQ0FBa0JDLEdBQWxCLENBQW5CO0FBQ0EsUUFBTVUsUUFBUSxHQUFHQyxPQUFPLENBQUNDLEdBQVIsQ0FBWUMsU0FBWixJQUF5QkwsaUJBQTFDO0FBQ0FSLEVBQUFBLEdBQUcsQ0FBQ2MsR0FBSixDQUFRLFVBQVIsRUFBb0JKLFFBQXBCO0FBR0FELEVBQUFBLFVBQVUsQ0FBQ00sTUFBWCxDQUFrQmYsR0FBRyxDQUFDZ0IsR0FBSixDQUFRLFVBQVIsQ0FBbEIsRUFBdUMsTUFDckNDLE9BQU8sQ0FBQ0MsR0FBUixDQUFZdkIsS0FBSyxDQUFDd0IsS0FBTixDQUFhLGdEQUErQ1QsUUFBUyxFQUFyRSxDQUFaLENBREY7QUFJQSxTQUFPO0FBQ0xELElBQUFBO0FBREssR0FBUDtBQUdELENBdkJEIiwic291cmNlUm9vdCI6Ii9ob21lL2FudHRpL2NvZGUvZmx1eGNlbGwvc2VydmVyL3NyYyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGh0dHAgPSByZXF1aXJlKCdodHRwJyk7XG5jb25zdCBib2R5UGFyc2VyID0gcmVxdWlyZSgnYm9keS1wYXJzZXInKTtcbmNvbnN0IHBhdGggPSByZXF1aXJlKCdwYXRoJyk7XG5jb25zdCBjaGFsayA9IHJlcXVpcmUoJ2NoYWxrJyk7XG5jb25zdCBleHByZXNzID0gcmVxdWlyZSgnZXhwcmVzcycpO1xuXG5tb2R1bGUuZXhwb3J0cy5jcmVhdGVTZXJ2ZXIgPSAoYXBwKSA9PiB7XG4gIGFwcC51c2UoZXhwcmVzcy5zdGF0aWMocGF0aC5qb2luKF9fZGlybmFtZSwgJy4vJykpKTtcbiAgYXBwLnVzZShcbiAgICBib2R5UGFyc2VyLnVybGVuY29kZWQoe1xuICAgICAgZXh0ZW5kZWQ6IHRydWUsXG4gICAgfSksXG4gICk7XG4gIGFwcC51c2UoYm9keVBhcnNlci5qc29uKCkpO1xuXG4gIGNvbnN0IERFRkFVTFRfUE9SVF9IVFRQID0gNDQ0NDtcblxuICBjb25zdCBodHRwU2VydmVyID0gaHR0cC5jcmVhdGVTZXJ2ZXIoYXBwKTtcbiAgY29uc3QgcG9ydEh0dHAgPSBwcm9jZXNzLmVudi5QT1JUX0hUVFAgfHwgREVGQVVMVF9QT1JUX0hUVFA7XG4gIGFwcC5zZXQoJ3BvcnRIdHRwJywgcG9ydEh0dHApO1xuXG5cbiAgaHR0cFNlcnZlci5saXN0ZW4oYXBwLmdldCgncG9ydEh0dHAnKSwgKCkgPT5cbiAgICBjb25zb2xlLmxvZyhjaGFsay5ncmVlbihgRGV2IGFwaSBzZXJ2ZXIgbGlzdGVuaW5nIG9uIGh0dHA6Ly9sb2NhbGhvc3Q6JHtwb3J0SHR0cH1gKSksXG4gICk7XG5cbiAgcmV0dXJuIHtcbiAgICBodHRwU2VydmVyLFxuICB9O1xufTtcbiJdfQ==",
    "map": {
      "version": 3,
      "sources": [
        "server.js"
      ],
      "names": [
        "http",
        "require",
        "bodyParser",
        "path",
        "chalk",
        "express",
        "module",
        "exports",
        "createServer",
        "app",
        "use",
        "static",
        "join",
        "__dirname",
        "urlencoded",
        "extended",
        "json",
        "DEFAULT_PORT_HTTP",
        "httpServer",
        "portHttp",
        "process",
        "env",
        "PORT_HTTP",
        "set",
        "listen",
        "get",
        "console",
        "log",
        "green"
      ],
      "mappings": "AAAA,MAAMA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB;;AACA,MAAMC,UAAU,GAAGD,OAAO,CAAC,aAAD,CAA1B;;AACA,MAAME,IAAI,GAAGF,OAAO,CAAC,MAAD,CAApB;;AACA,MAAMG,KAAK,GAAGH,OAAO,CAAC,OAAD,CAArB;;AACA,MAAMI,OAAO,GAAGJ,OAAO,CAAC,SAAD,CAAvB;;AAEAK,MAAM,CAACC,OAAP,CAAeC,YAAf,GAA+BC,GAAD,IAAS;AACrCA,EAAAA,GAAG,CAACC,GAAJ,CAAQL,OAAO,CAACM,MAAR,CAAeR,IAAI,CAACS,IAAL,CAAUC,SAAV,EAAqB,IAArB,CAAf,CAAR;AACAJ,EAAAA,GAAG,CAACC,GAAJ,CACER,UAAU,CAACY,UAAX,CAAsB;AACpBC,IAAAA,QAAQ,EAAE;AADU,GAAtB,CADF;AAKAN,EAAAA,GAAG,CAACC,GAAJ,CAAQR,UAAU,CAACc,IAAX,EAAR;AAEA,QAAMC,iBAAiB,GAAG,IAA1B;AAEA,QAAMC,UAAU,GAAGlB,IAAI,CAACQ,YAAL,CAAkBC,GAAlB,CAAnB;AACA,QAAMU,QAAQ,GAAGC,OAAO,CAACC,GAAR,CAAYC,SAAZ,IAAyBL,iBAA1C;AACAR,EAAAA,GAAG,CAACc,GAAJ,CAAQ,UAAR,EAAoBJ,QAApB;AAGAD,EAAAA,UAAU,CAACM,MAAX,CAAkBf,GAAG,CAACgB,GAAJ,CAAQ,UAAR,CAAlB,EAAuC,MACrCC,OAAO,CAACC,GAAR,CAAYvB,KAAK,CAACwB,KAAN,CAAa,gDAA+CT,QAAS,EAArE,CAAZ,CADF;AAIA,SAAO;AACLD,IAAAA;AADK,GAAP;AAGD,CAvBD",
      "sourceRoot": "/home/antti/code/fluxcell/server/src",
      "sourcesContent": [
        "const http = require('http');\nconst bodyParser = require('body-parser');\nconst path = require('path');\nconst chalk = require('chalk');\nconst express = require('express');\n\nmodule.exports.createServer = (app) => {\n  app.use(express.static(path.join(__dirname, './')));\n  app.use(\n    bodyParser.urlencoded({\n      extended: true,\n    }),\n  );\n  app.use(bodyParser.json());\n\n  const DEFAULT_PORT_HTTP = 4444;\n\n  const httpServer = http.createServer(app);\n  const portHttp = process.env.PORT_HTTP || DEFAULT_PORT_HTTP;\n  app.set('portHttp', portHttp);\n\n\n  httpServer.listen(app.get('portHttp'), () =>\n    console.log(chalk.green(`Dev api server listening on http://localhost:${portHttp}`)),\n  );\n\n  return {\n    httpServer,\n  };\n};\n"
      ]
    },
    "sourceType": "module",
    "mtime": 1553430765358
  },
  "{\"sourceRoot\":\"/home/antti/code/fluxcell/server/src\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"/home/antti/code/fluxcell/server\",\"filename\":\"/home/antti/code/fluxcell/server/src/restApi.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/home/antti/code/fluxcell/server\",\"plugins\":[],\"presets\":[]}:7.1.0": {
    "metadata": {},
    "options": {
      "sourceRoot": "/home/antti/code/fluxcell/server/src",
      "caller": {
        "name": "@babel/node"
      },
      "cwd": "/home/antti/code/fluxcell/server",
      "filename": "/home/antti/code/fluxcell/server/src/restApi.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/home/antti/code/fluxcell/server",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/home/antti/code/fluxcell/server/src/restApi.js",
        "plugins": []
      },
      "generatorOpts": {
        "filename": "/home/antti/code/fluxcell/server/src/restApi.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/home/antti/code/fluxcell/server/src",
        "sourceFileName": "restApi.js"
      }
    },
    "ast": null,
    "code": "import { log } from './utils/logger';\nimport Space from './db/models/Space';\n\nmodule.exports = function restApi(app) {\n  app.post('/api/postTest', (req, res) => {\n    log('req.body', req.body);\n    res.json({\n      payload: 'ok',\n      status: 'postTest OK'\n    });\n  });\n  app.get('/api/getTest', (req, res) => {\n    log('req.query', req.query);\n    res.json({\n      payload: 'ok',\n      status: 'getTest OK'\n    });\n  });\n  app.get('/api/getPostsByChannel', async (req, res) => {\n    log('getting posts by channel', req.query.q);\n    const posts = await Space.getMessagesOfSpace(req.query.q);\n    res.json({\n      payload: posts\n    });\n  });\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInJlc3RBcGkuanMiXSwibmFtZXMiOlsibG9nIiwiU3BhY2UiLCJtb2R1bGUiLCJleHBvcnRzIiwicmVzdEFwaSIsImFwcCIsInBvc3QiLCJyZXEiLCJyZXMiLCJib2R5IiwianNvbiIsInBheWxvYWQiLCJzdGF0dXMiLCJnZXQiLCJxdWVyeSIsInEiLCJwb3N0cyIsImdldE1lc3NhZ2VzT2ZTcGFjZSJdLCJtYXBwaW5ncyI6IkFBQUEsU0FBU0EsR0FBVCxRQUFvQixnQkFBcEI7QUFDQSxPQUFPQyxLQUFQLE1BQWtCLG1CQUFsQjs7QUFFQUMsTUFBTSxDQUFDQyxPQUFQLEdBQWlCLFNBQVNDLE9BQVQsQ0FBaUJDLEdBQWpCLEVBQXNCO0FBQ3JDQSxFQUFBQSxHQUFHLENBQUNDLElBQUosQ0FBUyxlQUFULEVBQTBCLENBQUNDLEdBQUQsRUFBTUMsR0FBTixLQUFjO0FBQ3RDUixJQUFBQSxHQUFHLENBQUMsVUFBRCxFQUFhTyxHQUFHLENBQUNFLElBQWpCLENBQUg7QUFDQUQsSUFBQUEsR0FBRyxDQUFDRSxJQUFKLENBQVM7QUFBRUMsTUFBQUEsT0FBTyxFQUFFLElBQVg7QUFBaUJDLE1BQUFBLE1BQU0sRUFBRTtBQUF6QixLQUFUO0FBQ0QsR0FIRDtBQUtBUCxFQUFBQSxHQUFHLENBQUNRLEdBQUosQ0FBUSxjQUFSLEVBQXdCLENBQUNOLEdBQUQsRUFBTUMsR0FBTixLQUFjO0FBQ3BDUixJQUFBQSxHQUFHLENBQUMsV0FBRCxFQUFjTyxHQUFHLENBQUNPLEtBQWxCLENBQUg7QUFDQU4sSUFBQUEsR0FBRyxDQUFDRSxJQUFKLENBQVM7QUFBRUMsTUFBQUEsT0FBTyxFQUFFLElBQVg7QUFBaUJDLE1BQUFBLE1BQU0sRUFBRTtBQUF6QixLQUFUO0FBQ0QsR0FIRDtBQUtBUCxFQUFBQSxHQUFHLENBQUNRLEdBQUosQ0FBUSx3QkFBUixFQUFrQyxPQUFPTixHQUFQLEVBQVlDLEdBQVosS0FBb0I7QUFDcERSLElBQUFBLEdBQUcsQ0FBQywwQkFBRCxFQUE2Qk8sR0FBRyxDQUFDTyxLQUFKLENBQVVDLENBQXZDLENBQUg7QUFFQSxVQUFNQyxLQUFLLEdBQUcsTUFBTWYsS0FBSyxDQUFDZ0Isa0JBQU4sQ0FBeUJWLEdBQUcsQ0FBQ08sS0FBSixDQUFVQyxDQUFuQyxDQUFwQjtBQUNBUCxJQUFBQSxHQUFHLENBQUNFLElBQUosQ0FBUztBQUFFQyxNQUFBQSxPQUFPLEVBQUVLO0FBQVgsS0FBVDtBQUNELEdBTEQ7QUFNRCxDQWpCRCIsInNvdXJjZVJvb3QiOiIvaG9tZS9hbnR0aS9jb2RlL2ZsdXhjZWxsL3NlcnZlci9zcmMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBsb2cgfSBmcm9tICcuL3V0aWxzL2xvZ2dlcic7XG5pbXBvcnQgU3BhY2UgZnJvbSAnLi9kYi9tb2RlbHMvU3BhY2UnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHJlc3RBcGkoYXBwKSB7XG4gIGFwcC5wb3N0KCcvYXBpL3Bvc3RUZXN0JywgKHJlcSwgcmVzKSA9PiB7XG4gICAgbG9nKCdyZXEuYm9keScsIHJlcS5ib2R5KTtcbiAgICByZXMuanNvbih7IHBheWxvYWQ6ICdvaycsIHN0YXR1czogJ3Bvc3RUZXN0IE9LJyB9KTtcbiAgfSk7XG5cbiAgYXBwLmdldCgnL2FwaS9nZXRUZXN0JywgKHJlcSwgcmVzKSA9PiB7XG4gICAgbG9nKCdyZXEucXVlcnknLCByZXEucXVlcnkpO1xuICAgIHJlcy5qc29uKHsgcGF5bG9hZDogJ29rJywgc3RhdHVzOiAnZ2V0VGVzdCBPSycgfSk7XG4gIH0pO1xuXG4gIGFwcC5nZXQoJy9hcGkvZ2V0UG9zdHNCeUNoYW5uZWwnLCBhc3luYyAocmVxLCByZXMpID0+IHtcbiAgICBsb2coJ2dldHRpbmcgcG9zdHMgYnkgY2hhbm5lbCcsIHJlcS5xdWVyeS5xKTtcblxuICAgIGNvbnN0IHBvc3RzID0gYXdhaXQgU3BhY2UuZ2V0TWVzc2FnZXNPZlNwYWNlKHJlcS5xdWVyeS5xKTtcbiAgICByZXMuanNvbih7IHBheWxvYWQ6IHBvc3RzIH0pO1xuICB9KTtcbn07XG4iXX0=",
    "map": {
      "version": 3,
      "sources": [
        "restApi.js"
      ],
      "names": [
        "log",
        "Space",
        "module",
        "exports",
        "restApi",
        "app",
        "post",
        "req",
        "res",
        "body",
        "json",
        "payload",
        "status",
        "get",
        "query",
        "q",
        "posts",
        "getMessagesOfSpace"
      ],
      "mappings": "AAAA,SAASA,GAAT,QAAoB,gBAApB;AACA,OAAOC,KAAP,MAAkB,mBAAlB;;AAEAC,MAAM,CAACC,OAAP,GAAiB,SAASC,OAAT,CAAiBC,GAAjB,EAAsB;AACrCA,EAAAA,GAAG,CAACC,IAAJ,CAAS,eAAT,EAA0B,CAACC,GAAD,EAAMC,GAAN,KAAc;AACtCR,IAAAA,GAAG,CAAC,UAAD,EAAaO,GAAG,CAACE,IAAjB,CAAH;AACAD,IAAAA,GAAG,CAACE,IAAJ,CAAS;AAAEC,MAAAA,OAAO,EAAE,IAAX;AAAiBC,MAAAA,MAAM,EAAE;AAAzB,KAAT;AACD,GAHD;AAKAP,EAAAA,GAAG,CAACQ,GAAJ,CAAQ,cAAR,EAAwB,CAACN,GAAD,EAAMC,GAAN,KAAc;AACpCR,IAAAA,GAAG,CAAC,WAAD,EAAcO,GAAG,CAACO,KAAlB,CAAH;AACAN,IAAAA,GAAG,CAACE,IAAJ,CAAS;AAAEC,MAAAA,OAAO,EAAE,IAAX;AAAiBC,MAAAA,MAAM,EAAE;AAAzB,KAAT;AACD,GAHD;AAKAP,EAAAA,GAAG,CAACQ,GAAJ,CAAQ,wBAAR,EAAkC,OAAON,GAAP,EAAYC,GAAZ,KAAoB;AACpDR,IAAAA,GAAG,CAAC,0BAAD,EAA6BO,GAAG,CAACO,KAAJ,CAAUC,CAAvC,CAAH;AAEA,UAAMC,KAAK,GAAG,MAAMf,KAAK,CAACgB,kBAAN,CAAyBV,GAAG,CAACO,KAAJ,CAAUC,CAAnC,CAApB;AACAP,IAAAA,GAAG,CAACE,IAAJ,CAAS;AAAEC,MAAAA,OAAO,EAAEK;AAAX,KAAT;AACD,GALD;AAMD,CAjBD",
      "sourceRoot": "/home/antti/code/fluxcell/server/src",
      "sourcesContent": [
        "import { log } from './utils/logger';\nimport Space from './db/models/Space';\n\nmodule.exports = function restApi(app) {\n  app.post('/api/postTest', (req, res) => {\n    log('req.body', req.body);\n    res.json({ payload: 'ok', status: 'postTest OK' });\n  });\n\n  app.get('/api/getTest', (req, res) => {\n    log('req.query', req.query);\n    res.json({ payload: 'ok', status: 'getTest OK' });\n  });\n\n  app.get('/api/getPostsByChannel', async (req, res) => {\n    log('getting posts by channel', req.query.q);\n\n    const posts = await Space.getMessagesOfSpace(req.query.q);\n    res.json({ payload: posts });\n  });\n};\n"
      ]
    },
    "sourceType": "module",
    "mtime": 1553430765358
  }
}